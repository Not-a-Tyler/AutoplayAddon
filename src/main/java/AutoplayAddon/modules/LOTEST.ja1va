package AutoplayAddon.modules;

import AutoplayAddon.AutoplayAddon;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.events.render.Render3DEvent;
import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.meteorclient.utils.player.ChatUtils;
import meteordevelopment.meteorclient.utils.render.color.Color;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.network.packet.s2c.play.*;
import net.minecraft.util.math.Vec3d;

import java.util.HashMap;
import java.util.Map;

public class LOTEST extends Module {
    private final Map<Integer, Vec3d> entityPositions = new HashMap<>();
    public LOTEST() {
        super(AutoplayAddon.autoplay, "test-module-1", "bypass live overflows movement checks");
    }


    @EventHandler()
    private void onRecievePacket(PacketEvent.Receive event) {
//        if (event.packet instanceof PlayerPositionLookS2CPacket) {
//            PlayerPositionLookS2CPacket packet = (PlayerPositionLookS2CPacket) event.packet;
//
//            ChatUtils.info(" PlayerPositionLookS2CPacket packet " + packet.getX() + " " + packet.getY() + " " + packet.getZ());
//        }
        if (event.packet instanceof PlayerSpawnS2CPacket) {
            PlayerSpawnS2CPacket packet = (PlayerSpawnS2CPacket) event.packet;
            entityPositions.put(packet.getId(), new Vec3d(packet.getX(), packet.getY(), packet.getZ()));
        }

//        if (event.packet instanceof PlayerSpawnPositionS2CPacket) {
//            PlayerSpawnPositionS2CPacket packet = (PlayerSpawnPositionS2CPacket) event.packet;
//            entityPositions.put(packet., packet.getPos().toCenterPos());
//            ChatUtils.info(" PlayerSpawnPositionS2CPacket packet " + packet.getPos());
//        }
        if (event.packet instanceof EntitySpawnS2CPacket) {
            EntitySpawnS2CPacket packet = (EntitySpawnS2CPacket) event.packet;
            entityPositions.put(packet.getId(), new Vec3d(packet.getX(), packet.getY(), packet.getZ()));
        }
        if (event.packet instanceof EntityVelocityUpdateS2CPacket) {
            EntityVelocityUpdateS2CPacket packet = (EntityVelocityUpdateS2CPacket) event.packet;
            Vec3d currPos = entityPositions.getOrDefault(packet.getId(), Vec3d.ZERO);
            Vec3d newPos = currPos.add(packet.getVelocityX(), packet.getVelocityY(), packet.getVelocityZ());
            entityPositions.put(packet.getId(), new Vec3d(packet.getX(), packet.getY(), packet.getZ()));
            ChatUtils.info(" EntityVelocityUpdateS2CPacket packet " + packet.getVelocityX() + " " + packet.getVelocityY() + " " + packet.getVelocityZ());
        }
        if (event.packet instanceof EntityPositionS2CPacket) {
            EntityPositionS2CPacket packet = (EntityPositionS2CPacket) event.packet;
            entityPositions.put(packet.getId(), new Vec3d(packet.getX(), packet.getY(), packet.getZ()));
        }
    }

    @EventHandler()
    private void onRender(Render3DEvent event) {
        event.renderer.box(x1, y1, z1, x2, y2, z2, Color.ORANGE, Color.ORANGE, ShapeMode.Both, 0);
    }



}
